# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/60_interact.ipynb (unless otherwise specified).

__all__ = ['scatter_cols', 'html', 'choose_data']

# Cell
from ipywidgets import interact,interact_manual
import pandas as pd
from .utils import emberReader,get_ember_record
import json
from IPython.display import display,HTML
import plotly.graph_objects as go

# Cell
def scatter_cols(cols = ["min","max","mean","max"]):
    df = ember_sub_df
    fig = go.Figure()
    tnames = df.tname.unique()
    for col in cols:
        for tname in tnames:
            sub_df = df[df.tname==tname]
            fig.add_trace(go.Scatter(x = sub_df.ts,
                                     y = sub_df[col],
                                     line=dict(width=4),
                                     name = f"{col} {tname}"))
    module = list(df.module)[0]
    fig.update_layout(title=f"{module}",
                     yaxis_title = "Value",
                      xaxis_title = "Time",
                     )
    fig.show()

# Cell
def html(x):
    display(HTML(x))

def choose_data():
    latest_tasks = list(i["name"] for i in get_ember_record())[:20]
    def choose_task(task = latest_tasks):
        er = emberReader(task)
        def choose_log(log_file = er.t.log_files):
            html(f"<div>Log file:\t<code>{log_file}</code> selected</div>")
            df = pd.DataFrame(json.loads(er.read_log(log_file)))
            def choose_plot(module = df.module.unique(),
                            ttype = df.ttype.unique(),
                           ):
                cols = ["mean","std","max","min","cnt_zero","zero_pct"]
                module_df = df[df.module == module]
                global ember_sub_df
                ember_sub_df =  module_df[module_df.ttype == ttype]
                html(f"<h3>Data selected</h3>")
                html(f"<h4>Module:\t{module}</h4>")
                html(f"<h4>Tensor Type:\t{ttype}</h4>")
#                 display(ember_sub_df)
                if len(ember_sub_df)>0:
                    scatter_cols(cols)
                else:
                    html(f"""<div>No such selection under <strong>{module}</Strong>
                    <br><strong>{ttype}</Strong></div>""")
                return ember_sub_df
            interact_manual(choose_plot)
        sub_df = interact_manual(choose_log)
    html("<h2>Choose from task names</h2>")
    interact(choose_task)