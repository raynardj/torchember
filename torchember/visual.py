# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/60_interact.ipynb (unless otherwise specified).

__all__ = ['scatter_cols', 'html', 'Visualize', 'VisualByTensor', 'moving_track', 'clean_module_name', 'VisualMovement']

# Cell
from ipywidgets import interact,interact_manual
import pandas as pd
from .utils import emberReader,get_ember_record
import json
from IPython.display import display,HTML
import plotly.graph_objects as go

try:
    import google.colab
    IN_COLAB = True
except:
    IN_COLAB = False

# Cell
def scatter_cols(module_df,cols = ["min","max","mean","max"]):
    """
    scatter plot the columns d
    """
    df = module_df
    fig = go.Figure()
    tnames = df.tname.unique()
    for col in cols:
        for tname in tnames:
            sub_df = df[df.tname==tname]
            fig.add_trace(go.Scatter(x = sub_df.ts,
                                     y = sub_df[col],
                                     line=dict(width=4),
                                     name = f"{col} {tname}"))
    module = list(df.module)[0]
    fig.update_layout(title=f"{module}",
                     yaxis_title = "Value",
                      xaxis_title = "Time",
                     )
    if IN_COLAB:
        fig.show(renderer="colab")
    else:
        fig.show()


# Cell
def html(x):
    display(HTML(x))

class Visualize:
    def __init__(self):
        self.latest_tasks = list(i["name"] for i in get_ember_record())[:20]

    def choose_task_(self,build_later):
        def choose_task(task = self.latest_tasks):
            self.er = emberReader(task)
            self.log_files = self.er.t.log_files
            later_func = build_later()
            interact_manual(later_func)
        self.choose_task = choose_task

    def build_df(self,log_file):
        html(f"<div>Log file:\t<code>{log_file}</code> selected</div>")
        self.df = pd.DataFrame(json.loads(self.er.read_log(log_file)))
        self.modules = self.df.module.unique()
        self.ttypes = self.df.ttype.unique()

class VisualByTensor(Visualize):
    def __init__(self):
        super().__init__()
        # define the chaine by define next step
        self.choose_task_(self.choose_log_)
        interact(self.choose_task)

    def choose_log_(self):
        def choose_log(log_file = self.log_files):
            self.build_df(log_file)
            self.choose_plot_()
            interact_manual(self.choose_plot)

        self.choose_log = choose_log
        return self.choose_log

    def choose_plot_(self):
        def choose_plot(module = self.modules,
                            ttype = self.ttypes,
                           ):
            cols = ["mean","std","max","min","zero_pct"]
            self.module_df = self.df[self.df.module == module]
            self.ember_sub_df =  self.module_df[self.module_df.ttype == ttype]
            html(f"<h3>Data selected</h3>")
            html(f"<h4>Module:\t{module}</h4>")
            html(f"<h4>Tensor Type:\t{ttype}</h4>")
            if len(self.ember_sub_df)>0:
                scatter_cols(self.ember_sub_df,cols)
            else:
                html(f"""<div>No such selection under <strong>{module}</Strong>
                    <br><strong>{ttype}</Strong></div>""")
            return self.ember_sub_df

        self.choose_plot = choose_plot

# Cell
import numpy as np
def moving_track(x):
    return np.mean(abs(x))

def clean_module_name(x):
    mlist = x.split(".")
    if len(mlist) <= 1:
        return x
    else:
        return ">".join(list(i.split("(")[0] for i in mlist[:-1])+list([mlist[-1],]))

class VisualMovement(Visualize):
    def __init__(self):
        super().__init__()
        self.choose_task_(self.choose_log_)

        interact(self.choose_task)

    def choose_log_(self):
        def choose_log(log_file = self.log_files):
            self.build_df(log_file)
            self.build_shift()
            self.choose_tensor_()
            interact_manual(self.choose_tensor)

        self.choose_log = choose_log
        return self.choose_log

    def choose_tensor_(self):
        def choose_tensor(ttype = {"Weights":"weight","Gradients":"grad","Outputs":"output_dt"}):
            self.sub_df = self.shifted[self.shifted.ttype==ttype]
            self.sub_df["module"] = self.sub_df.module.apply(clean_module_name)

            float_format= pd.options.display.float_format
            max_colwidth = pd.options.display.max_colwidth
            pd.options.display.float_format = lambda x:"%.5f"%(x)
            pd.options.display.max_colwidth = -1

            for col in ["mean","std"]:
                html(f"<h3>{ttype}/{col} movements</h3>")
                html(f"""<blockquote>{ttype}
                        <strong>{col}</strong> top accumulated changes
                        </blockquote>""")
                display(self.sub_df\
                        .sort_values(by = col, ascending=False)\
                        .head(6)\
                        [["module","tname",col]])
                html(f"""<blockquote>{ttype}
                        <strong>{col}</strong> least accumulated changes
                        </blockquote>""")
                display(self.sub_df\
                        .sort_values(by = col, ascending=True)\
                        .head(6)\
                        [["module","tname",col]])

            # change back the pandas option
            pd.options.display.float_format = float_format
            pd.options.display.max_colwidth = max_colwidth
        self.choose_tensor = choose_tensor

    def build_shift(self):
        """
        statistics on tensor shifting
        """
        self.shifted = self.df.groupby(["module","ttype","tname"])\
                .agg(moving_track)\
                .reset_index()[["module","ttype","tname","mean",
                                "std","min","max","zero_pct"]]
        return self.shifted